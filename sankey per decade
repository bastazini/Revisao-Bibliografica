# --- 0. Load Necessary Libraries ---
# Ensure these packages are installed:
# install.packages(c("readxl", "dplyr", "tidyr", "stringr",
#                    "networkD3", "htmlwidgets", "webshot2", "magick"))

library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
library(networkD3)
library(htmlwidgets)
library(webshot2) # For saving HTML widget snapshot
library(magick)   # For converting snapshot PNG to PDF

# --- Parameters ---
excel_file <- "bibliographic_data_output.xlsx" # Input Excel file name
keyword_column <- "palavras-chave"       # Name of the column with keywords
year_column <- "Ano"                    # Name of the column with publication year
keyword_separator <- ","                # How keywords are separated

num_top_keywords_per_decade <- 10       # Sankey: Number of top keywords PER DECADE to track

# --- Keywords to Remove ---
# Add any other generic/undesired words (lowercase) to this list
keywords_to_remove <- c(
  "article", "artigo", "paper", "review", "study", "estudo",
  "research", "journal"
  # Adicione mais palavras comuns que não são palavras-chave reais aqui
)

# --- Specific Keyword Concatenations ---
# Define pairs where the first element should be replaced by the second
keyword_replacements <- list(
  c("land use change", "land use"),
  c("mudança no uso da terra", "uso da terra"), # Example in Portuguese
  c("uso e cobertura da terra", "uso da terra") # Example combining cover
  # Add more pairs if needed
)

# --- Output Files ---
output_sankey_decades_pdf <- "tendencia_decadas_palavras_chave_PT.pdf" # Sankey static PDF
output_sankey_decades_html <- "tendencia_decadas_palavras_chave_PT.html" # Sankey interactive HTML

# --- Main Script Body ---
tryCatch({
  # --- 1. Load and Prepare Data ---
  cat("Carregando dados de:", excel_file, "\n")
  bib_data <- read_excel(excel_file, sheet = 1)
  
  if (!keyword_column %in% names(bib_data)) stop("Coluna de palavras-chave '", keyword_column, "' não encontrada.")
  if (!year_column %in% names(bib_data)) stop("Coluna de ano '", year_column, "' não encontrada.")
  
  keywords_df <- bib_data %>%
    mutate(paper_id = row_number()) %>%
    select(paper_id, !!sym(keyword_column), !!sym(year_column)) %>%
    rename(keywords = !!sym(keyword_column), year = !!sym(year_column)) %>%
    filter(!is.na(keywords), nchar(trimws(keywords)) > 0, !is.na(year)) %>%
    mutate(year = as.numeric(as.character(year))) %>%
    filter(!is.na(year))
  
  if(nrow(keywords_df) == 0) stop("Nenhum dado válido após filtrar por palavras-chave e anos.")
  cat("Dados carregados. Processando", nrow(keywords_df), "artigos.\n")
  
  # --- 2. Clean, Split, Filter, and Concatenate Keywords ---
  cat("Limpando, separando, filtrando e concatenando palavras-chave...\n")
  
  keywords_long_raw <- keywords_df %>%
    mutate(keyword_list = str_split(keywords, fixed(keyword_separator))) %>%
    unnest(keyword_list) %>%
    mutate(keyword = str_trim(keyword_list)) %>%
    filter(nchar(keyword) > 0) %>%
    mutate(keyword = tolower(keyword)) %>%
    select(paper_id, year, keyword) %>%
    distinct(paper_id, year, keyword)
  
  cat(" - Removendo palavras-chave genéricas...\n")
  keywords_long_cleaned <- keywords_long_raw %>%
    filter(!keyword %in% keywords_to_remove)
  
  cat(" - Concatenando termos específicos...\n")
  keywords_long_concatenated <- keywords_long_cleaned
  if (length(keyword_replacements) > 0) {
    for (replacement_pair in keyword_replacements) {
      term_to_replace <- replacement_pair[1]
      replacement_term <- replacement_pair[2]
      keywords_long_concatenated <- keywords_long_concatenated %>%
        mutate(keyword = ifelse(keyword == term_to_replace, replacement_term, keyword))
    }
    keywords_long_concatenated <- keywords_long_concatenated %>%
      distinct(paper_id, year, keyword) # Re-apply distinct after potential merges
  }
  
  keywords_long_final <- keywords_long_concatenated
  
  if(nrow(keywords_long_final) == 0) stop("Nenhuma palavra-chave válida restante após a limpeza.")
  cat("Processamento de palavras-chave concluído. Instâncias válidas:", nrow(keywords_long_final), "\n")
  
  # --- 3. Aggregate by Decade and Calculate Frequencies ---
  cat("\n--- Agregando por Década e Calculando Frequências ---\n")
  keywords_decades <- keywords_long_final %>%
    filter(!is.na(year)) %>%
    mutate(decade = floor(year / 10) * 10) %>% # Calculate decade
    select(paper_id, decade, keyword) %>%
    distinct() # Count each keyword only once per paper within a decade
  
  keyword_decade_counts <- keywords_decades %>%
    count(decade, keyword, name = "count") %>%
    arrange(decade, desc(count))
  
  if(nrow(keyword_decade_counts) == 0) stop("Nenhuma contagem de palavras-chave por década encontrada.")
  cat("Contagem de palavras-chave por década calculada.\n")
  
  # --- 4. Identify Top Keywords for Each Decade ---
  cat("Identificando as", num_top_keywords_per_decade, "principais palavras-chave por década...\n")
  top_keywords_per_decade <- keyword_decade_counts %>%
    group_by(decade) %>%
    slice_max(order_by = count, n = num_top_keywords_per_decade, with_ties = FALSE) %>%
    ungroup()
  
  # Get the unique set of keywords that were ever in the top N for any decade
  keywords_to_track <- unique(top_keywords_per_decade$keyword)
  cat("Total de palavras-chave únicas a serem rastreadas (top", num_top_keywords_per_decade, "em alguma década):", length(keywords_to_track), "\n")
  # print(keywords_to_track) # Optional: print the keywords being tracked
  
  # Filter the counts to only include these keywords
  sankey_base_data <- keyword_decade_counts %>%
    filter(keyword %in% keywords_to_track)
  
  # --- 5. Prepare Nodes and Links for Sankey ---
  cat("Preparando nós e links para o diagrama Sankey...\n")
  
  # Create Nodes: Each node is a "Decade_Keyword" combination
  nodes_df <- sankey_base_data %>%
    mutate(name = paste0(decade, "s - ", keyword)) %>% # Node label
    select(name) %>%
    distinct() %>%
    mutate(id = row_number() - 1) # 0-based index for networkD3
  
  # Create Links: Connect the same keyword from one decade to the next
  decade_list <- sort(unique(sankey_base_data$decade))
  links_list <- list()
  
  for (i in 1:(length(decade_list) - 1)) {
    current_decade <- decade_list[i]
    next_decade <- decade_list[i+1]
    
    # Find keywords present in both the current and next decade within our tracked set
    current_decade_data <- sankey_base_data %>% filter(decade == current_decade)
    next_decade_data <- sankey_base_data %>% filter(decade == next_decade)
    
    common_keywords <- intersect(current_decade_data$keyword, next_decade_data$keyword)
    
    if (length(common_keywords) > 0) {
      # Create links for these common keywords
      temp_links <- tibble(keyword = common_keywords) %>%
        # Get source node info (current decade)
        mutate(source_name = paste0(current_decade, "s - ", keyword)) %>%
        left_join(nodes_df %>% select(name, source_id = id), by = c("source_name" = "name")) %>%
        # Get target node info (next decade)
        mutate(target_name = paste0(next_decade, "s - ", keyword)) %>%
        left_join(nodes_df %>% select(name, target_id = id), by = c("target_name" = "name")) %>%
        # Get the value (count) from the *target* node's data
        left_join(next_decade_data %>% select(keyword, value = count), by = "keyword") %>%
        # Filter out any missing joins (shouldn't happen with intersect, but safety first)
        filter(!is.na(source_id), !is.na(target_id), !is.na(value), value > 0) %>%
        # Select final columns for sankeyNetwork
        select(source = source_id, target = target_id, value = value, group = keyword) # Use keyword for LinkGroup color
      
      links_list[[as.character(current_decade)]] <- temp_links
    }
  }
  
  if (length(links_list) > 0) {
    links_df <- bind_rows(links_list)
  } else {
    links_df <- tibble(source = integer(), target = integer(), value = numeric(), group = character()) # Empty tibble
  }
  
  if (nrow(nodes_df) == 0 || nrow(links_df) == 0) {
    cat("AVISO: Não foi possível criar nós ou links válidos para o Sankey de décadas. Pulando a geração do gráfico.\n")
    sankey_plot_obj_decades <- NULL
  } else {
    cat("Nós:", nrow(nodes_df), "; Links:", nrow(links_df), "criados.\n")
    
    # --- 6. Generate Sankey Diagram ---
    cat("Criando objeto do gráfico Sankey de décadas...\n")
    
    # Define a color scale for keywords (groups) if many keywords
    num_groups <- length(unique(links_df$group))
    if (num_groups <= 12) {
      color_scale_js <- 'd3.scaleOrdinal(d3.schemeCategory10);' # Standard D3 scale
    } else {
      # Use a more diverse scale if needed, maybe interpolate
      # This requires more complex JS or pre-defining colors in R
      # For simplicity, stick to Category10 or similar for now.
      color_scale_js <- 'd3.scaleOrdinal(d3.schemeCategory10);'
      cat("AVISO: Mais de 12 grupos de palavras-chave, as cores podem se repetir no gráfico.\n")
    }
    
    
    sankey_plot_obj_decades <- sankeyNetwork(
      Links = links_df, Nodes = nodes_df, Source = "source",
      Target = "target", Value = "value", NodeID = "name",
      LinkGroup = "group", # Color links by keyword
      NodeGroup = NULL, # Nodes not colored by group here
      units = "Menções",
      fontSize = 10, nodeWidth = 25, nodePadding = 12,
      sinksRight = FALSE, # Important for temporal flow L->R
      colourScale = JS(color_scale_js),
      margin = list(top=40, bottom=10, left=10, right=10)
    )
    
    # Add title to HTML object
    title_sankey_decades <- paste0("Evolução das ", num_top_keywords_per_decade, " Principais Palavras-chave por Década")
    sankey_plot_obj_decades_html <- htmlwidgets::prependContent(sankey_plot_obj_decades,
                                                                htmltools::tags$h3(title_sankey_decades,
                                                                                   style = "text-align:center; margin-bottom: 0px;"))
    
    # --- 7. Save Sankey Diagram (HTML and PDF) ---
    # Save Interactive HTML
    cat("Salvando diagrama Sankey interativo em:", output_sankey_decades_html, "\n")
    tryCatch({
      saveWidget(sankey_plot_obj_decades_html, file = file.path(getwd(), output_sankey_decades_html), selfcontained = TRUE)
      cat("Diagrama Sankey interativo salvo.\n")
    }, error = function(e_html){
      cat("Erro ao salvar o HTML do Sankey:", conditionMessage(e_html), "\n")
    })
    
    # Save Static PDF via Screenshot
    cat("Salvando imagem estática do Sankey em PDF:", output_sankey_decades_pdf, "(via webshot2/magick)...\n")
    cat("Isso pode levar alguns segundos e requer Chrome/Chromium...\n")
    temp_html_sankey <- tempfile(fileext = ".html")
    temp_png_sankey <- tempfile(fileext = ".png")
    snapshot_success <- FALSE
    
    tryCatch({
      # Save widget *without* the explicit title for better screenshotting
      saveWidget(sankey_plot_obj_decades, temp_html_sankey, selfcontained = TRUE)
      webshot2::webshot(url = temp_html_sankey, file = temp_png_sankey,
                        delay = 3, vwidth = 1100, vheight = 750) # Adjust vwidth/vheight as needed
      
      if (file.exists(temp_png_sankey) && file.info(temp_png_sankey)$size > 0) {
        img <- magick::image_read(temp_png_sankey)
        img_with_title <- magick::image_annotate(img,
                                                 text = title_sankey_decades,
                                                 gravity = "north",
                                                 location = "+0+10",
                                                 size = 20, # Slightly larger title
                                                 color = "black",
                                                 weight = 700) # Bold
        magick::image_write(img_with_title, path = output_sankey_decades_pdf, format = "pdf")
        snapshot_success <- TRUE
      } else {
        cat("Aviso: Falha ao criar o arquivo PNG temporário para o Sankey PDF.\n")
      }
      
    }, error = function(e_sankey_pdf){
      cat("ERRO ao tentar salvar Sankey em PDF via webshot/magick:", conditionMessage(e_sankey_pdf), "\n")
      cat("Verifique se 'webshot2', 'magick' estão instalados e se Chrome/Chromium está acessível.\n")
      cat("O gráfico Sankey interativo pode ter sido salvo em:", output_sankey_decades_html, "\n")
      
    }, finally = {
      if (file.exists(temp_html_sankey)) try(unlink(temp_html_sankey), silent=TRUE)
      if (file.exists(temp_png_sankey)) try(unlink(temp_png_sankey), silent=TRUE)
    })
    if(snapshot_success) cat("PDF estático do Sankey salvo em:", output_sankey_decades_pdf, "\n")
  } # End else block for valid nodes/links
  
  
  # End of main tryCatch block
}, error = function(e) {
  cat("\n----------------------\n")
  cat("Ocorreu um erro GERAL no script:\n")
  cat(conditionMessage(e), "\n")
  cat("----------------------\n")
})

cat("\n--- Script de Sankey por Década finalizado. Verifique os arquivos PDF e HTML gerados. ---\n")

