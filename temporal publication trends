# --- 0. Carregar Bibliotecas Necessárias ---
# install.packages("readxl") # Execute se não tiver instalado
# install.packages("dplyr")  # Execute se não tiver instalado
# install.packages("bbmle") # Execute se não tiver instalado

library(readxl)
library(dplyr)
library(bbmle)

# --- 1. Parâmetros ---
excel_file <- "estudos_workshop_445_metadados.xlsx" # Verifique se o arquivo está no diretório ou forneça o caminho completo
output_plot_file <- "grafico_tendencia_publicacoes.png" # Opcional: Nome do arquivo para salvar o gráfico

# --- 2. Carregar e Preparar Dados ---
tryCatch({
  # Ler a planilha com os dados (assumindo ser a primeira)
  bib_data <- read_excel(excel_file, sheet = 1)
  
  # Verificar se a coluna 'Ano' existe
  if (!"Ano" %in% names(bib_data)) {
    stop("Erro: Coluna 'Ano' não encontrada no arquivo Excel.") # PT
  }
  
  # Remover linhas onde 'Ano' é NA e garantir que 'Ano' seja numérico
  pub_counts <- bib_data %>%
    filter(!is.na(Ano)) %>%
    mutate(Ano = as.numeric(as.character(Ano))) %>% # Garantir que 'Ano' seja numérico
    filter(!is.na(Ano)) %>% # Filtrar novamente caso a conversão gere NAs
    count(Ano, name = "Contagem") %>% # Contar publicações por ano # PT
    arrange(Ano) # Ordenar por ano
 #remover 2025 
  pub_counts <- bib_data %>%
    filter(!is.na(Ano)) %>%
    mutate(Ano = as.numeric(as.character(Ano))) %>%
    filter(!is.na(Ano)) %>%
    filter(Ano < 2025) %>%  # ← Add this line to remove 2025
    count(Ano, name = "Contagem") %>%
    arrange(Ano)
  
  
  # Verificar se há dados suficientes para modelagem
  if (nrow(pub_counts) < 4) { # Reduzido, pois removemos um modelo
    stop(paste("Erro: Não há anos únicos com dados suficientes (encontrados", nrow(pub_counts), "). Necessário pelo menos 4 para modelagem confiável.")) # PT
  }
  
  # --- 3. Definir x (Ano) e y (Contagem) ---
  x <- pub_counts$Ano
  y <- pub_counts$Contagem # PT
  
  cat("Dados carregados e agregados com sucesso.\n") # PT
  cat("Anos (x):\n"); print(x) # PT
  cat("Contagens (y):\n"); print(y) # PT
  
  # --- 4. Ajustar Modelos ---
  cat("\nAjustando modelos...\n") # PT
  
  # Modelo Nulo (Apenas Intercepto)
  model_null <- tryCatch({ lm(y ~ 1) }, error = function(e) { cat("Erro ajustando modelo nulo:", conditionMessage(e), "\n"); NULL }) # PT
  
  # Modelo Linear
  model_linear <- tryCatch({ lm(y ~ x) }, error = function(e) { cat("Erro ajustando modelo linear:", conditionMessage(e), "\n"); NULL }) # PT
  
  # Modelo Exponencial: y ~ a * exp(b * x)
  start_exp <- list(a = mean(y[x <= median(x)]),
                    b = ifelse(is.null(model_linear), 0.01, coefficients(model_linear)[2] / mean(y)))
  
  if (all(y > 0)) {
    log_fit <- lm(log(y) ~ x)
    a_start <- exp(coef(log_fit)[1])
    b_start <- coef(log_fit)[2]
    start_exp <- list(a = a_start, b = b_start)
    cat("Start values from log-linear fit:\n")
    print(start_exp)
  }
  
  model_exponential <- tryCatch({
    nls(y ~ a * exp(b * x), start = start_exp, control = nls.control(maxiter = 1000))
  }, warning = function(w){ cat("Aviso ajustando modelo exponencial:", conditionMessage(w), "\n"); NULL}, # PT
  error = function(e) { cat("Erro ajustando modelo exponencial:", conditionMessage(e), "\n"); NULL }) # PT
  
  # <<< MODELO LOGARÍTMICO REMOVIDO >>>
  
  # Modelo Assintótico (Inverso): y ~ a + b/x
  model_asymptotic <- NULL # Inicializa como NULL
  if(any(x == 0)) {
    cat("Aviso: Não é possível ajustar o modelo assintótico porque alguns anos (x) são 0.\n") # PT
  } else {
    start_asymp <- list(a = ifelse(is.null(model_linear) || length(coefficients(model_linear)) < 1, mean(y), coefficients(model_linear)[1]),
                        b = ifelse(is.null(model_linear) || length(coefficients(model_linear)) < 2, 1, coefficients(model_linear)[2]))
    model_asymptotic <- tryCatch({
      nls(y ~ a + b / x, start = start_asymp, control = nls.control(maxiter = 100))
    }, warning = function(w){ cat("Aviso ajustando modelo assintótico:", conditionMessage(w), "\n"); NULL}, # PT
    error = function(e) { cat("Erro ajustando modelo assintótico:", conditionMessage(e), "\n"); NULL }) # PT
  }
  
  
  cat("Ajuste de modelos completo.\n") # PT
  
  # --- 5. Comparar Modelos usando AICc ---
  cat("\nComparando modelos usando AICc:\n") # PT
  
  # Criar uma lista de modelos ajustados com sucesso
  model_list <- Filter(Negate(is.null),
                       list(Nulo = model_null,         # PT
                            Linear = model_linear,
                            Exponencial = model_exponential, # PT
                            # Logaritmico removido
                            Assintotico = model_asymptotic)) # PT
  
  if (length(model_list) > 0) {
    # Calcular tabela AICc
    aic_table <- tryCatch({
      # Renomeia para corresponder aos nomes PT na lista antes de chamar AICctab
      names(model_list) <- c("Nulo", "Linear", "Exponencial", "Assintotico")[match(names(model_list), c("Nulo", "Linear", "Exponencial", "Assintotico"))]
      bbmle::AICctab(model_list, nobs = length(x), weights = TRUE, delta = TRUE, base = TRUE)
    }, error = function(e){ cat("Erro calculando AICctab:", conditionMessage(e), "\n"); NULL}) # PT
    
    if (!is.null(aic_table)) {
      print(aic_table)
    }
  } else {
    cat("Nenhum modelo foi ajustado com sucesso para comparação.\n") # PT
  }
  
  
  # --- 6. Plotar Dados e Modelos Ajustados ---
  cat("\nGerando gráfico...\n") # PT
  
  # Definir sequência de valores x para curvas suaves
  plot_x_seq <- seq(min(x), max(x), length.out = 200)
  
  # Configurar área do gráfico
  plot(y ~ x,
       xlab = "Ano",                            # <<< PT
       ylab = "Número de Publicações",         # <<< PT
       main = "Tendência de Publicações ao Longo do Tempo", # <<< PT
       pch = 16,
       col = "grey40",
       cex = 1.2,
       las = 1,
       ylim = c(0, max(y, na.rm = TRUE) * 1.1) # Adicionado na.rm=TRUE para segurança
  )
  grid() # Adicionar grade de fundo
  
  # Adicionar linhas dos modelos (apenas se ajustados com sucesso)
  model_colors <- c("Nulo" = "grey", "Linear" = "dodgerblue", "Exponencial" = "red",
                    "Assintotico" = "purple") # Removido Logaritmico
  model_lty <- c("Nulo"=3, "Linear"=1, "Exponencial"=1, "Assintotico"=1) # Removido Logaritmico
  legend_labels <- c()
  legend_colors <- c()
  legend_lty <- c()
  
  # Modelo Nulo
  if (!is.null(model_null)) {
    abline(h = coefficients(model_null)[1], col = model_colors["Nulo"], lwd = 2, lty = model_lty["Nulo"])
    legend_labels <- c(legend_labels, "Nulo (Apenas Intercepto)") # <<< PT
    legend_colors <- c(legend_colors, model_colors["Nulo"])
    legend_lty <- c(legend_lty, model_lty["Nulo"])
  }
  
  # Modelo Linear
  if (!is.null(model_linear)) {
    abline(model_linear, col = model_colors["Linear"], lwd = 2, lty = model_lty["Linear"])
    legend_labels <- c(legend_labels, "Linear") # (Mantido, ou pode ser "Modelo Linear")
    legend_colors <- c(legend_colors, model_colors["Linear"])
    legend_lty <- c(legend_lty, model_lty["Linear"])
  }
  
  # Modelo Exponencial
  if (!is.null(model_exponential)) {
    coef_exp <- coefficients(model_exponential)
    lines(plot_x_seq, coef_exp["a"] * exp(coef_exp["b"] * plot_x_seq), col = model_colors["Exponencial"], lwd = 2, lty = model_lty["Exponencial"])
    legend_labels <- c(legend_labels, "Exponencial") # <<< PT
    legend_colors <- c(legend_colors, model_colors["Exponencial"])
    legend_lty <- c(legend_lty, model_lty["Exponencial"])
  }
  
  # <<< MODELO LOGARÍTMICO REMOVIDO DA PLOTAGEM >>>
  
  # Modelo Assintótico
  if (!is.null(model_asymptotic)) {
    coef_asymp <- coefficients(model_asymptotic)
    # Plotar apenas para valores x não-zero na sequência
    plot_x_nonzero <- plot_x_seq[plot_x_seq != 0]
    if (length(plot_x_nonzero) > 0) { # Verificar se ainda há pontos para plotar
      lines(plot_x_nonzero, coef_asymp["a"] + coef_asymp["b"] / plot_x_nonzero, col = model_colors["Assintotico"], lwd = 2, lty = model_lty["Assintotico"])
      legend_labels <- c(legend_labels, "Assintótico (Inverso)") # <<< PT
      legend_colors <- c(legend_colors, model_colors["Assintotico"])
      legend_lty <- c(legend_lty, model_lty["Assintotico"])
    }
  }
  
  # Adicionar Legenda (apenas se houver modelos para mostrar)
  if (length(legend_labels) > 0) {
    legend("topleft", # Posicionar a legenda
           legend = legend_labels,
           col = legend_colors,
           lty = legend_lty,
           lwd = 2,
           bty = "n", # Sem caixa ao redor da legenda
           cex = 0.8)
  }
  
  cat("Gráfico gerado.\n") # PT
  
  # Opcional: Salvar o gráfico em um arquivo
  # tryCatch({
  #   dev.copy(png, filename = output_plot_file, width = 8, height = 6, units = "in", res = 300)
  #   dev.off()
  #   cat("Gráfico salvo em:", output_plot_file, "\n") # PT
  # }, error = function(e) {
  #   cat("Erro ao salvar o gráfico:", conditionMessage(e), "\n") # PT
  # })
  
  
}, error = function(e) {
  # Capturar erros durante carregamento ou processamento inicial
  cat("Ocorreu um erro durante o carregamento ou preparação dos dados:\n") # PT
  cat(conditionMessage(e), "\n")
})

cat("Script finalizado.\n") # PT
